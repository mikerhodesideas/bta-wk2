You are tasked with creating a Google Ads script that reads data from a spreadsheet, uses AI to classify search terms, and writes the results back to the sheet. Follow these instructions carefully:

1. Start by setting up the script to read from a Google Sheet. Use the following URL for the sheet:
<sheet_url>{{SHEET_URL}}</sheet_url>

2. Read the following settings from the sheet:
   - 'topTerms': This is the named range for the search terms to be classified.
   - 'cheap': This is the named range to determine if the user wants to use the cheaper model or not.
   - 'key_openai': This is the named range for the OpenAI API key.

Use the SpreadsheetApp.openByUrl() method to open the sheet, and getRange() method with the named ranges to retrieve these values.

3. Determine which OpenAI model to use based on the 'cheap' setting:
   - If the 'cheap' setting is "yes", use the model "gpt-4o-mini"
   - If the 'cheap' setting is "no", use the model "gpt-4o"

4. For classifying search terms, use the following categories:
INFORMATIONAL: Queries seeking general information
NAVIGATIONAL: Queries looking for a specific website or page
COMMERCIAL: Queries with buying intent
LOCAL: Queries related to local businesses or services
QUESTION: Queries phrased as questions

Create a prompt that asks the AI to classify each search term into one of these categories and provide a brief explanation for the classification.

5. Loop through each search term in the 'topTerms' range:
   a. Call the OpenAI API to classify the term
   b. Store the classification result and explanation
   c. After classifying all terms, write the results back to the sheet in columns adjacent to the search terms

6. Use the following code template for the OpenAI API call, modifying it as needed:

<code>
function generateTextOpenAI(prompt, apiKey, model) {
    Logger.log('Generating report with OpenAI');
    let url = 'https://api.openai.com/v1/chat/completions';
    let messages = [
        { "role": "user", "content": prompt }
    ];
    let payload = {
        "model": model,
        "messages": messages
    };
    let httpOptions = {
        "method": "POST",
        "muteHttpExceptions": true,
        "contentType": "application/json",
        "headers": {
            "Authorization": 'Bearer ' + apiKey
        },
        'payload': JSON.stringify(payload)
    };
    let response = UrlFetchApp.fetch(url, httpOptions);
    let responseCode = response.getResponseCode();
    let responseContent = response.getContentText();

    // Error handling and response parsing code here...

    let responseJson = JSON.parse(response.getContentText());
    let choices = responseJson.choices;
    let text = choices[0].message.content;
    return (text);
}
</code>

7. Put it all together:
   a. Create a main function that orchestrates the entire process
   b. Read the settings from the sheet
   c. Determine the OpenAI model to use
   d. Loop through the search terms, classifying each one
   e. Write the results back to the sheet

Remember to handle errors gracefully and log any issues that occur during the script execution. Use the Logger.log() function to output important information and debugging messages.

Your final script should be able to run within the Google Ads environment, read from the specified Google Sheet, classify search terms using the OpenAI API, and write the results back to the sheet.